const axios = require("axios");
const readline = require("readline");

const API_URL = "https://api.newlxp.ru/graphql";
const EMAIL = "evloevam@magas.ithub.ru";
const PASSWORD = "password";

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function signIn() {
    const query = `
    query SignIn($input: SignInInput!) {
      signIn(input: $input) {
        user {
          id
          isLead
          __typename
        }
        accessToken
        __typename
      }
    }
    `;
    const variables = {
        input: {
            email: EMAIL,
            password: PASSWORD
        }
    };
    try {
        const response = await axios.post(API_URL, { query, variables });
        return response.data.data.signIn.accessToken;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error.response?.data?.errors?.[0]?.message || error.message);
        process.exit(1);
    }
}

async function getUserData(token) {
    const query = `
    query GetMe {
      getMe {
        id
        firstName
        lastName
        roles
        __typename
      }
    }
    `;
    const headers = { Authorization: `Bearer ${token}` };
    try {
        const response = await axios.post(API_URL, { query }, { headers });
        return response.data.data.getMe;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.response?.data?.errors?.[0]?.message || error.message);
        return null;
    }
}

async function getTasksPage(token, studentId, pageSize, page = 1) {
    const query = `
    query StudentAvailableTasks($input: StudentAvailableTasksInput!) {
      studentAvailableTasks(input: $input) {
        hasMore
        page
        perPage
        total
        totalPages
        items {
          ...StudentAvailableTaskFragment
          __typename
        }
        __typename
      }
    }
    
    fragment StudentAvailableTaskFragment on StudentContentBlock {
      kind
      taskDeadline
      taskCanBeAnsweredAfterDeadline
      passDate
      testScore
      task {
        id
        scoreInPercent
        answers {
          id
          __typename
        }
        __typename
      }
      testInterval {
        from
        to
        __typename
      }
      customTaskDeadline {
        deadline
        formEducation {
          id
          startedAt
          finishedAt
          form
          studentId
          comment
          __typename
        }
        __typename
      }
      customTestInterval {
        interval {
          from
          to
          __typename
        }
        formEducation {
          id
          startedAt
          finishedAt
          form
          studentId
          comment
          __typename
        }
        __typename
      }
      studentTopic {
        status
        __typename
      }
      topic {
        name
        id
        isCheckPoint
        isForPortfolio
        chapterId
        chapter {
          id
          name
          disciplineId
          discipline {
            name
            code
            suborganization {
              organization {
                id
                name
                timezoneMinutesOffset
                __typename
              }
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      contentBlock {
        ... on TaskDisciplineTopicContentBlock {
          id
          kind
          name
          maxScore
          __typename
        }
        ... on TestDisciplineTopicContentBlock {
          id
          name
          kind
          testMaxScore: maxScore
          canBePassed
          testId
          __typename
        }
        __typename
      }
      __typename
    }
    `;
    
    const variables = {
        input: {
            studentId: studentId,
            pageSize: pageSize,
            page: page,
            filters: {
                fromArchivedDiscipline: false
            }
        }
    };
    
    const headers = { Authorization: `Bearer ${token}` };
    
    try {
        const response = await axios.post(API_URL, { 
            operationName: "StudentAvailableTasks",
            query,
            variables 
        }, { headers });
        
        return response.data.data.studentAvailableTasks;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:", error.response?.data?.errors?.[0]?.message || error.message);
        return null;
    }
}

async function getTaskDetails(token, studentId, topicId, contentId) {
    const query = `
    query GetDisciplineTaskBlockByTopicIdAndContentId($input: GetByTopicIdAndContentIdInput!, $studentId: UUID!) {
      getDisciplineTaskBlockByTopicIdAndContentId(input: $input) {
        id
        name
        maxScore
        body
        studentCanSendAnswers(studentId: $studentId)
        studentDeadline(studentId: $studentId)
        studentCanSendAnswersAfterDeadline(studentId: $studentId)
        customStudentDeadline(studentId: $studentId) {
          deadline
          __typename
        }
        competencies {
          id
          name
          __typename
        }
        __typename
      }
    }
    `;
    
    const variables = {
        input: {
            contentId,
            topicId
        },
        studentId
    };
    
    const headers = { Authorization: `Bearer ${token}` };
    
    try {
        const response = await axios.post(API_URL, { 
            operationName: "GetDisciplineTaskBlockByTopicIdAndContentId",
            query,
            variables 
        }, { headers });
        
        return response.data.data.getDisciplineTaskBlockByTopicIdAndContentId;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:", error.response?.data?.errors?.[0]?.message || error.message);
        return null;
    }
}

function formatTasksList(tasksData) {
    if (!tasksData || !tasksData.items || tasksData.items.length === 0) {
        return "üö´ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è";
    }

    let output = `\nüìñ –ó–∞–¥–∞–Ω–∏—è (${tasksData.page}/${tasksData.totalPages})`;
    output += ` | –í—Å–µ–≥–æ: ${tasksData.total} | –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${tasksData.items.length}`;
    output += `\n${"‚îÅ".repeat(60)}\n`;

    tasksData.items.forEach((task, index) => {
        const taskNum = index + 1;
        const taskType = task.kind === 'TASK' ? 'üìù –ó–∞–¥–∞–Ω–∏–µ' : 'üß™ –¢–µ—Å—Ç';
        const taskName = task.contentBlock?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const discipline = task.topic?.chapter?.discipline?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const status = task.studentTopic?.status || '‚ùì –ù–µ –Ω–∞—á–∞—Ç–æ';
        const deadline = task.taskDeadline ? new Date(task.taskDeadline).toLocaleString() : '‚è≥ –ù–µ—Ç —Å—Ä–æ–∫–∞';

        output += `\n${taskNum}. ${taskType}: ${taskName}`;
        output += `\n   üè´ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: ${discipline}`;
        output += `\n   üìå –°—Ç–∞—Ç—É—Å: ${status}`;
        output += `\n   ‚è∞ –°—Ä–æ–∫: ${deadline}`;
        output += `\n   üîó ID –∑–∞–¥–∞–Ω–∏—è: ${task.contentBlock?.id || '–ù–µ—Ç ID'}`;
        output += `\n${"‚îÄ".repeat(60)}`;
    });

    output += `\n\nüìú –°—Ç—Ä–∞–Ω–∏—Ü—ã: ${tasksData.hasMore ? '–ï—Å—Ç—å –µ—â–µ' : '–ü–æ—Å–ª–µ–¥–Ω—è—è'}`;
    return output;
}

function formatTaskDetails(task) {
    if (!task) return "üö´ –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";

    let output = `\nüìå ${task.name}`;
    output += `\n${"‚îÅ".repeat(60)}`;
    output += `\nüíØ –ú–∞–∫—Å. –±–∞–ª–ª: ${task.maxScore || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
    output += `\n‚è≥ –°—Ä–æ–∫ —Å–¥–∞—á–∏: ${task.studentDeadline ? new Date(task.studentDeadline).toLocaleString() : '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
    output += `\nüì§ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${task.studentCanSendAnswers ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`;
    
    if (task.customStudentDeadline) {
        output += `\n‚è±Ô∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫: ${new Date(task.customStudentDeadline.deadline).toLocaleString()}`;
    }

    if (task.body) {
        try {
            const bodyJson = JSON.parse(task.body);
            let cleanBody = '';
            
            bodyJson.forEach(item => {
                if (item.type === 'paragraph' && item.data?.text) {
                    cleanBody += item.data.text
                        .replace(/<[^>]+>/g, ' ')
                        .replace(/\s{2,}/g, ' ')
                        .trim() + '\n\n';
                }
            });
            
            if (cleanBody) {
                output += `\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n${"‚îÄ".repeat(60)}\n${cleanBody}`;
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞ –∑–∞–¥–∞–Ω–∏—è:", e);
        }
    }

    if (task.competencies?.length > 0) {
        output += `\n\nüèÜ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:`;
        task.competencies.forEach(comp => {
            output += `\n   ‚Ä¢ ${comp.name}`;
        });
    }

    return output;
}

async function mainMenu(token, studentId) {
    let currentPage = 1;
    let pageSize = 10;
    let tasksData = null;

    while (true) {
        console.clear();
        console.log("=== üìö –£—á–µ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ===");
        
        if (!tasksData || currentPage !== tasksData?.page) {
            console.log(`\n‚åõ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage}...`);
            tasksData = await getTasksPage(token, studentId, pageSize, currentPage);
        }

        if (tasksData) {
            console.log(formatTasksList(tasksData));
        } else {
            console.log("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è");
            await askQuestion("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...");
            continue;
        }

        console.log("\n1. –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É");
        console.log("2. –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ");
        console.log("3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É");
        console.log("4. –í—ã—Ö–æ–¥");

        const choice = await askQuestion("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

        switch (choice) {
            case '1':
                if (!tasksData) {
                    console.log("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
                    await askQuestion("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...");
                    break;
                }
                const newPage = parseInt(await askQuestion(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1-${tasksData.totalPages}): `));
                if (newPage >= 1 && newPage <= tasksData.totalPages) {
                    currentPage = newPage;
                } else {
                    console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã!");
                    await askQuestion("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...");
                }
                break;

            case '2':
                const newSize = parseInt(await askQuestion("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): "));
                if (newSize > 0 && newSize <= 100) {
                    pageSize = newSize;
                    currentPage = 1;
                    tasksData = null;
                } else {
                    console.log("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!");
                    await askQuestion("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...");
                }
                break;

            case '3':
                if (!tasksData || tasksData.items.length === 0) {
                    console.log("‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!");
                    await askQuestion("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...");
                    break;
                }

                const taskNum = parseInt(await askQuestion(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è (1-${tasksData.items.length}): `));
                if (taskNum >= 1 && taskNum <= tasksData.items.length) {
                    const selectedTask = tasksData.items[taskNum - 1];
                    const taskDetails = await getTaskDetails(
                        token,
                        studentId,
                        selectedTask.topic.id,
                        selectedTask.contentBlock.id
                    );
                    
                    console.clear();
                    console.log(formatTaskDetails(taskDetails));
                    await askQuestion("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...");
                } else {
                    console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è!");
                    await askQuestion("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...");
                }
                break;

            case '4':
                return;

            default:
                console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!");
                await askQuestion("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...");
                break;
        }
    }
}

(async () => {
    try {
        console.log("=== –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π ===");
        
        const token = await signIn();
        const userData = await getUserData(token);
        
        if (userData) {
            console.log(`\nüë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.firstName} ${userData.lastName || ''}!`);
            await mainMenu(token, userData.id);
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    } finally {
        rl.close();
    }
})();